[
    {
        "id": 1,
        "pid": "cf2cf0a483f57b5c196c144bd42717a0",
        "title": "Entidade Básica",
        "description": "É a base para todas as entidades dentro de um jogo. Ela define as coordenadas X e Y para representar a posição de qualquer objeto no espaço. Embora essa classe forneça uma estrutura inicial, ela não possui funcionalidades específicas, sendo projetada para ser estendida por subclasses que adicionarão comportamentos próprios. Os métodos `update()` e `draw()` são abstratos e precisam ser implementados pelas subclasses. O método `update()` é responsável pela atualização do estado da entidade, como movimentação ou alterações de lógica, enquanto o método `draw()` deve ser utilizado para renderizar a entidade na tela. Caso esses métodos não sejam sobrescritos, a classe lançará um erro, garantindo que a entidade seja configurada corretamente antes do uso. Esta abordagem proporciona uma estrutura comum e consistente para todas as entidades, ao mesmo tempo em que permite personalização e flexibilidade para cenários específicos.",
        "link": "https://raw.githubusercontent.com/GibranKhalil/codeeasy-ps2-backend/main/athena/gibranKhalil/Entity/index.js",
        "last_update": "10/03/2025",
        "last_modifier": {
            "name": "Gibran Khalil",
            "github": "https://github.com/GibranKhalil"
        },
        "modifiers": [],
        "how_to_use_description": "A classe Entity serve como uma base para representar qualquer objeto com posição em um jogo ou aplicação. No entanto, por si só, ela não realiza nenhuma ação. Você precisará criar uma subclasse que herde dela e defina o comportamento desejado para que a classe se torne útil em seu projeto.",
        "how_to_use_steps": [
            {
                "step": 1,
                "title": "Criando uma nova classe baseada em Entity",
                "description": "Para utilizar essa classe, crie uma nova classe que herde da Entity. A subclasse herdará as propriedades X e Y, representando a posição da entidade, e poderá adicionar comportamentos próprios, como movimentação ou interação."
            },
            {
                "step": 2,
                "title": "Implementando os métodos obrigatórios",
                "description": "A classe Entity exige que você implemente os métodos `update()` e `draw()` em sua subclasse. O método `update()` será responsável por atualizar o estado da entidade, como sua posição ou lógica interna. O método `draw()` deverá ser implementado para renderizar a entidade na tela, exibindo-a para o jogador. Caso não implemente esses métodos, a classe gerará um erro."
            },
            {
                "step": 3,
                "title": "Definindo a posição inicial da entidade",
                "description": "Quando você criar uma nova entidade baseada na classe Entity, pode definir sua posição inicial por meio dos valores X e Y. Se não informar esses valores, a posição será definida como (0, 0) por padrão."
            }
        ],
        "engine": "AthenaENV",
        "tags": [
            "AthenaENV",
            "PS2",
            "Entity",
            "Entidade"
        ],
        "creator": {
            "name": "Gibran Khalil",
            "github": "https://github.com/gibrankhalil"
        }
    },
    {
        "id": 2,
        "pid": "cf84740c113c668948a70856d3b29b15",
        "title": "Animação: SpriteSheet",
        "description": "Representa uma animação baseada em spritesheets, permitindo controlar a exibição de quadros individuais de uma imagem sequencial. Ela recebe parâmetros como o caminho do spritesheet, número total de frames, velocidade da animação, dimensões de cada frame e a opção de repetição em loop. Essa classe facilita a manipulação de animações em jogos ou interfaces visuais, permitindo exibir personagens, efeitos e outros elementos animados de forma fluida e dinâmica.",
        "link": "https://raw.githubusercontent.com/GibranKhalil/codeeasy-ps2-backend/main/athena/gibranKhalil/Animation/index.js",
        "last_update": "10/03/2025",
        "last_modifier": {
            "name": "Gibran Khalil",
            "github": "https://github.com/GibranKhalil"
        },
        "modifiers": [],
        "how_to_use_description": "A classe Animation é usada para gerenciar animações baseadas em spritesheets, permitindo exibir quadros sequenciais de uma imagem de forma fluida. Ela não exibe a animação por conta própria, mas fornece os dados necessários para que um sistema de renderização utilize os frames corretamente.",
        "how_to_use_steps": [
            {
                "step": 1,
                "title": "Criando uma nova animação",
                "description": "Para usar a classe Animation, você deve criar uma instância passando o caminho do spritesheet, o número total de frames, a velocidade da animação, o tamanho de cada frame e se a animação deve rodar em loop."
            },
            {
                "step": 2,
                "title": "Configurando os frames",
                "description": "Cada frame da animação é definido pelo seu tamanho dentro do spritesheet. A classe Animation armazena essas informações para que o sistema de renderização possa exibir a parte correta da imagem no momento certo."
            },
            {
                "step": 3,
                "title": "Atualizando a animação",
                "description": "Para que a animação funcione corretamente, é necessário um mecanismo externo que avance os frames ao longo do tempo, respeitando a velocidade definida. Essa lógica pode ser implementada em um gerenciador de animação ou dentro da própria entidade que utilizará a animação."
            },
            {
                "step": 4,
                "title": "Renderizando a animação",
                "description": "A classe Animation não desenha os frames diretamente, mas fornece as informações necessárias para que um sistema de renderização possa exibir o frame correto."
            }
        ],
        "engine": "AthenaENV",
        "tags": [
            "AthenaENV",
            "PS2",
            "Animation",
            "Animação"
        ],
        "can_use_with": [
            {
                "pid": "64dbaa1b617f97134d834b48a1418706",
                "title": "Gerenciador de Animações: SpriteSheets",
                "description": "Gerencia e controla as animações. Ela permite adicionar múltiplas animações, alternar entre elas, e atualizar os quadros da animação com base no tempo decorrido. Ideal para situações onde você precisa gerenciar várias animações simultaneamente, como personagens com diferentes estados ou efeitos animados em um jogo.",
                "last_update": "10/03/2025",
                "last_modifier": {
                    "name": "Gibran Khalil",
                    "github": "https://github.com/GibranKhalil"
                },
                "engine": "AthenaENV"
            }
        ],
        "creator": {
            "name": "Gibran Khalil",
            "github": "https://github.com/gibrankhalil"
        }
    },
    {
        "id": 3,
        "pid": "64dbaa1b617f97134d834b48a1418706",
        "title": "Gerenciador de Animações: SpriteSheets",
        "description": "Gerencia e controla as animações. Ela permite adicionar múltiplas animações, alternar entre elas, e atualizar os quadros da animação com base no tempo decorrido. Ideal para situações onde você precisa gerenciar várias animações simultaneamente, como personagens com diferentes estados ou efeitos animados em um jogo.",
        "link": "https://raw.githubusercontent.com/GibranKhalil/codeeasy-ps2-backend/main/athena/gibranKhalil/AnimationManager/index.js",
        "last_update": "10/03/2025",
        "last_modifier": {
            "name": "Gibran Khalil",
            "github": "https://github.com/GibranKhalil"
        },
        "modifiers": [],
        "how_to_use_description": "Usada para gerenciar múltiplas animações dentro de um sistema. Ela permite a adição de animações, a definição de qual animação será exibida e a atualização dos quadros da animação em tempo real. O AnimationManager também permite alternar entre animações e controlar a reprodução dos frames.",
        "how_to_use_steps": [
            {
                "step": 1,
                "title": "Criando o AnimationManager",
                "description": "Primeiro, crie uma instância do AnimationManager passando um objeto contendo as animações disponíveis. Cada animação deve ser uma instância da classe Animation, e o nome de cada animação será usado para alternar entre elas."
            },
            {
                "step": 2,
                "title": "Definindo a animação atual",
                "description": "Use o método `setAnimation()` para definir qual animação será executada. Você pode alternar entre as animações a qualquer momento, passando o nome da animação desejada."
            },
            {
                "step": 3,
                "title": "Atualizando a animação",
                "description": "A cada quadro do jogo, chame o método `updateAnimation()` para avançar o frame da animação com base no tempo decorrido. Isso garante que a animação seja atualizada corretamente, respeitando a velocidade definida."
            },
            {
                "step": 4,
                "title": "Obter o frame atual",
                "description": "Use o método `getCurrentFrame()` para obter o índice do frame atual da animação em execução. Essa informação pode ser usada para renderizar o quadro correto na tela."
            }
        ],
        "engine": "AthenaENV",
        "tags": [
            "AthenaENV",
            "PS2",
            "Animation",
            "Gerenciador de Animação"
        ],
        "creator": {
            "name": "Gibran Khalil",
            "github": "https://github.com/gibrankhalil"
        }
    },
    {
        "id": 4,
        "pid": "e9d6c9b1f6d2402a93cb38872417f375",
        "title": "Entidade Animada",
        "description": "Estende a classe Entity, adicionando suporte para animações. Ela gerencia animações associadas à entidade e permite alternar entre diferentes estados de animação. A classe também inclui a capacidade de espelhar a animação horizontalmente (flipX), sendo útil em jogos ou aplicações que exigem a movimentação de objetos animados com base em diferentes estados.",
        "link": "https://raw.githubusercontent.com/GibranKhalil/codeeasy-ps2-backend/main/athena/gibranKhalil/AnimatedEntity/index.js",
        "last_update": "10/03/2025",
        "last_modifier": {
            "name": "Gibran Khalil",
            "github": "https://github.com/GibranKhalil"
        },
        "modifiers": [],
        "how_to_use_description": "Torna uma entidade animada, permitindo definir, atualizar e gerenciar animações com base em um conjunto de animações previamente configuradas. Ela facilita a integração de animações a entidades existentes, proporcionando flexibilidade para mudar estados e exibir animações de maneira controlada.",
        "how_to_use_steps": [
            {
                "step": 1,
                "title": "Criando uma entidade animada",
                "description": "Primeiro, crie uma instância de AnimatedEntity, passando as posições iniciais e, opcionalmente, um conjunto de animações. Se não fornecer animações, a entidade ficará sem animação até que seja configurada posteriormente."
            },
            {
                "step": 2,
                "title": "Inicializando animações",
                "description": "Use o método `initializeAnimations()` para adicionar um conjunto de animações à entidade. Isso permitirá que a entidade utilize animações durante o ciclo de vida do jogo."
            },
            {
                "step": 3,
                "title": "Definindo a animação atual",
                "description": "Utilize o método `setAnimation()` para definir qual animação será exibida com base no estado desejado. Por exemplo, você pode ter animações diferentes para 'idle', 'run', 'jump', etc."
            },
            {
                "step": 4,
                "title": "Atualizando a animação",
                "description": "Dentro do ciclo de atualização do seu jogo, chame o método `update()` da AnimatedEntity. Isso garantirá que a animação seja atualizada juntamente com o estado da entidade."
            },
            {
                "step": 5,
                "title": "Obtendo a animação atual",
                "description": "Você pode usar o método `getCurrentAnimation()` para obter a animação que está sendo exibida no momento. Isso pode ser útil para controle de renderização ou verificações de estado."
            }
        ],
        "engine": "AthenaENV",
        "tags": [
            "AthenaENV",
            "PS2",
            "Animation",
            "Entity",
            "Animação",
            "Entidade Animada"
        ],
        "can_use_with": [
            {
                "pid": "64dbaa1b617f97134d834b48a1418706",
                "title": "Gerenciador de Animações: SpriteSheets",
                "description": "Gerencia e controla as animações. Ela permite adicionar múltiplas animações, alternar entre elas, e atualizar os quadros da animação com base no tempo decorrido. Ideal para situações onde você precisa gerenciar várias animações simultaneamente, como personagens com diferentes estados ou efeitos animados em um jogo.",
                "last_update": "10/03/2025",
                "last_modifier": {
                    "name": "Gibran Khalil",
                    "github": "https://github.com/GibranKhalil"
                },
                "engine": "AthenaENV"
            }
        ],
        "creator": {
            "name": "Gibran Khalil",
            "github": "https://github.com/gibrankhalil"
        }
    }
]